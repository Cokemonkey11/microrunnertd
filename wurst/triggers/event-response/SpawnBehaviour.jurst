package SpawnBehaviour
	import Units
	import Players
	import ClosureTimers
	import Table

	native UnitAlive takes unit u returns boolean

	constant int  INVULNERABLE_ID = 'Avul'

	constant real AI_FIDELITY = 1.

	group grp = CreateGroup()

	Table taunts         = new Table
	Table tauntDurations = new Table

	function getClosestRunner takes unit q returns unit
		int index = 0
		unit u = null
		real r = 9999999.
		int  qHandleId = q.getHandleId()

		loop
			exitwhen index >= Players.COUNT

			real x = GetUnitX(q) - GetUnitX(Units.runners[index])
			real y = GetUnitY(q) - GetUnitY(Units.runners[index])

			if UnitAlive(Units.runners[index]) and (not Units.runners[index].hasAbility(INVULNERABLE_ID)) and (x * x) + (y * y) < r
				r = (x * x) + (y * y)
				u = Units.runners[index]
			end

			index++
		end

		if Table.ht.hasHandle(taunts castTo int, qHandleId)
			unit target = taunts.loadUnit(qHandleId)
			real duration = tauntDurations.loadReal(qHandleId) - AI_FIDELITY

			if duration <= 0. or not target.isAlive()
				taunts.removeHandle(qHandleId)
				tauntDurations.removeReal(qHandleId)
			else
				tauntDurations.saveReal(qHandleId, duration)

				if not target.hasAbility(INVULNERABLE_ID)
					u = target
				end
			end
		end

		return u
	end

	public function addTaunt(unit u, unit target, real duration)
		tauntDurations.saveReal(u.getHandleId(), duration)
		taunts.saveUnit(u.getHandleId(), target)
	end

	init
		doPeriodically(AI_FIDELITY, (CallbackPeriodic _) -> begin
			unit fst

			if GetPlayerState(Players.creeps, PLAYER_STATE_RESOURCE_FOOD_USED) > 0
				GroupEnumUnitsOfPlayer(grp, Players.creeps, null)
				loop
					fst = FirstOfGroup(grp)
					exitwhen fst == null

					unit targ = getClosestRunner(fst)
					if UnitAlive(fst) and targ != null
						IssuePointOrder(fst, "attack", GetUnitX(targ), GetUnitY(targ))
					end

					GroupRemoveUnit(grp, fst)
				end
			end
		end)
	end
