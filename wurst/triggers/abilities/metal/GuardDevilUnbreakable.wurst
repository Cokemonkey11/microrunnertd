package GuardDevilUnbreakable
import DamageEvent
import ClosureTimers
import Players
import Invulnerable

import UnitApi

constant ID_GUARD_DEVIL         = 'h03B'
constant ID_GUARD_DEVIL_GREATER = 'h03C'
constant ID_ABILITY_UNBREAKABLE = 'A01W'
constant ID_ABILITY_UNBREAKA_CD = 'A01X'

constant RADIUS   = 600.
constant DURATION =   1.
constant COOLDOWN =  60.

constant SHIELD_FX = "Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl"

constant grp = CreateGroup()

function isGuardDevil(unit u) returns bool
	return u.getTypeId() == ID_GUARD_DEVIL or u.getTypeId() == ID_GUARD_DEVIL_GREATER

function findUnbreakable(unit u) returns unit
	unit guard = null

	grp.enumUnitsInRange(vec2(u.getX(), u.getY()), RADIUS)
	for iter from grp
		if iter.isAlive() and isGuardDevil(iter) and iter.hasAbility(ID_ABILITY_UNBREAKABLE)
			guard = iter

	return guard

function h()
	let tU     = DamageEvent.getTarget()
	let damage = DamageEvent.getAmount()

	if tU.getOwner().getId() < Players.COUNT and DamageEvent.getType() == ATTACK and (tU.getHP() - damage < 1.) and not tU.hasAbility(UnitApi.INVULNERABLE)
		let unbreakableSource = findUnbreakable(tU)

		if unbreakableSource != null
			Invulnerable.apply(tU, DURATION)
			unbreakableSource.removeAbility(ID_ABILITY_UNBREAKABLE)
			unbreakableSource.addAbility(   ID_ABILITY_UNBREAKA_CD)
			let shield = tU.addEffect(SHIELD_FX, "origin")

			doAfter(DURATION, () -> begin
				shield.destr()
			end)

			doAfter(COOLDOWN, () -> begin
				unbreakableSource.addAbility(   ID_ABILITY_UNBREAKABLE)
				unbreakableSource.removeAbility(ID_ABILITY_UNBREAKA_CD)
			end)

init
	DamageEvent.addListener() () ->
		h()
