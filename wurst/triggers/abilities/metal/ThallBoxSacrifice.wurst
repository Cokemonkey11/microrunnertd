package ThallBoxSacrifice
import DamageType
import DamageDetection
import FloatText

constant ID_THALL_BOX         = 'h02T'
constant ID_ABILITY_SACRIFICE = 'A01B'

constant RADIUS = 90. + 16. * 2.

constant grp = CreateGroup()

function hasSacrifice(unit u) returns bool
	var willSacrifice = false

	grp.enumUnitsInRange(vec2(u.getX(), u.getY()), RADIUS)
	for iter from grp
		if iter.isAlive() and iter.getTypeId() == ID_THALL_BOX and iter.getOwner() == u.getOwner() and iter.hasAbility(ID_ABILITY_SACRIFICE)
			willSacrifice = true

		grp.removeUnit(iter)

	return willSacrifice

function h()
	let dS     = GetEventDamageSource()
	let tU     = GetTriggerUnit()
	let damage = GetEventDamage()

	if hasSacrifice(dS) and DamageType.get() == DamageType.ATTACK and tU.getHP() - damage < 1.
		tU.setHP(damage + 1.)
		FloatText.prevented(dS.getX(), dS.getY())
		dS.issueImmediateOrder("stop")

init
	addOnDamageFunc(function h)
