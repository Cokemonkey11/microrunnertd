package FestivalBoothLimitedBrew

import Assets
import DummyRecycler
import DamageEvent
import LinkedHashMap
import LinkedList
import LinkedListModule
import SellTower
import FloatText
import Game

import UnitApi

let clock = CreateTimer()

class DummyEffect
    use LinkedListModule

    unit owner
    unit dummy
    effect fx

    construct(unit owner, real height)
        this.owner = owner
        this.dummy = DummyRecycler.get(owner.getPos(), angle(0))
        this.fx = this.dummy.addEffect(Abilities.annihilationMissile, "origin")

        this.dummy..setFlyHeight(height, 0.)
                  ..setPos(owner.getPos())
                  ..setScale(.25)

    ondestroy
        this.fx.destr()
        DummyRecycler.recycle(dummy)

let booth_effects = new LinkedHashMap<unit, LinkedList<DummyEffect>>()
function h()
    let dS = DamageEvent.getSource()

    if GetUnitTypeId(dS) == UnitApi.ID_TOWER_FESTIVAL_BOOTH and DamageEvent.getType() == ATTACK
        let list = booth_effects.get(dS)
        let size = list.size()
        let amt = DamageEvent.getAmount()

        if size > 0
            let fst = list.get(0)
            destroy fst
            list.removeAt(0)

            let tU = DamageEvent.getTarget()
            dS.addEffect(Abilities.annihilationMissile, "origin").destr()
            DamageEvent.setNextDamageFromCode()
            dS.damageTarget(tU, 100.)

            FloatText.bonus(dS.getX(), dS.getY(), amt.toInt() + 100)

function constructed()
    let tower = GetConstructedStructure()
    if tower.getTypeId() == UnitApi.ID_TOWER_FESTIVAL_BOOTH
        let effects = new LinkedList<DummyEffect>()..add(new DummyEffect(tower, 300.))
                                                   ..add(new DummyEffect(tower, 250.))
                                                   ..add(new DummyEffect(tower, 200.))
                                                   ..add(new DummyEffect(tower, 150.))
                                                   ..add(new DummyEffect(tower, 100.))
        booth_effects.put(tower, effects)

function roundStart()
    booth_effects.forEach() (entry) ->
        let u = entry.key
        let list = entry.value
        while list.size() < 5
            let size = list.size()
            list.addtoStart(new DummyEffect(u, 100. + 50. * size))

function _sellUpgradeCommon(unit tU, int id)
    if tU.getTypeId() == id
        let effects = booth_effects.get(tU)
        while effects.size() > 0
            let fst = effects.get(0)
            destroy fst
            effects.removeAt(0)
        booth_effects.remove(tU)

function onSell()
    _sellUpgradeCommon(GetTriggerUnit(), UnitApi.ID_TOWER_FESTIVAL_BOOTH)

function onUpgrade()
    _sellUpgradeCommon(GetTriggerUnit(), UnitApi.ID_TOWER_BARREL_EXCHANGE_AGREEMENT)

init
    // Hide effect on-hit; deal damage.  Increased priority so that this is
    // executed before the listener in BarrelExchangeBottleOfWhisky.
    DamageEvent.addListener(0) ->
        h()

    // On structure built, initialize effects.
    CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
                   ..addCondition(Condition(function constructed))

    // Round start, reset effects.
    Game.registerOnRoundStart(function roundStart)

    // On sell, drop effects.
    registerOnSell(function onSell)

    // On upgrade, drop effects.
    CreateTrigger()..registerAnyUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH)
                   ..addCondition(Condition(function onUpgrade))
