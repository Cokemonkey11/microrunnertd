package Invulnerable
public class Invulnerable
	private static constant ID_INVULNERABLE = 'Avul'

	private static constant FIDELITY = 1. / 30.

	private static timer clock = CreateTimer()

	private static Invulnerable array invulns

	private static int stackPointer = -1

	unit which
	real durationLeft

	static function periodic()
		for i = 0 to stackPointer
			Invulnerable wrapper = invulns[stackPointer]
			wrapper.durationLeft -= FIDELITY

			if wrapper.durationLeft <= 0.
				wrapper.which.removeAbility(ID_INVULNERABLE)
				destroy wrapper
				invulns[i] = invulns[stackPointer]
				stackPointer--
				i--

		if stackPointer == -1
			clock.pause()

	static function apply(unit u, real minDuration)
		Invulnerable wrapper = null

		// First check if this unit is already within the locking set.
		for i = 0 to stackPointer
			wrapper = invulns[i]

			if wrapper.which == u
				if minDuration > wrapper.durationLeft
					wrapper.durationLeft = minDuration

				break

		// If none found, make a new one.
		if wrapper == null
			wrapper = new Invulnerable
			wrapper.which = u
			u.addAbility(ID_INVULNERABLE)
			wrapper.durationLeft = minDuration

			stackPointer++
			invulns[stackPointer] = wrapper

			if stackPointer == 0
				// Timer was off, have to restart it.
				clock.startPeriodic(FIDELITY, function periodic)
